#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

function usage() {
  console.log('\nUsage: node ./scripts/setup-firebase.js [--google-services <path>] [--web-config <path>]');
  console.log('\nOptions:');
  console.log('  --google-services, -g   Path to google-services.json (Android)');
  console.log('  --web-config, -w        Path to a JSON file with web firebase config (will write firebaseConfig.ts)');
  console.log('\nExample:');
  console.log('  node ./scripts/setup-firebase.js -g C:/Downloads/google-services.json -w C:/Downloads/firebase-web-config.json\n');
}

function writeFirebaseConfig(targetPath, obj) {
  const content = `// Generated by scripts/setup-firebase.js â€” replace values if needed\nconst firebaseConfig = ${JSON.stringify(obj, null, 2)};\n\nexport default firebaseConfig;\n`;
  fs.writeFileSync(targetPath, content, { encoding: 'utf8' });
  console.log(`Wrote web firebase config to ${targetPath}`);
}

function copyGoogleServices(source, dest) {
  fs.copyFileSync(source, dest);
  console.log(`Copied google-services.json to ${dest}`);
}

async function main() {
  const args = process.argv.slice(2);
  if (args.length === 0) {
    usage();
    process.exit(0);
  }

  let googleServicesPath = null;
  let webConfigPath = null;

  for (let i = 0; i < args.length; i++) {
    const a = args[i];
    if (a === '--google-services' || a === '-g') {
      googleServicesPath = args[i + 1];
      i++;
    } else if (a === '--web-config' || a === '-w') {
      webConfigPath = args[i + 1];
      i++;
    }
  }

  const projectRoot = path.resolve(__dirname, '..');

  if (googleServicesPath) {
    const src = path.resolve(googleServicesPath);
    if (!fs.existsSync(src)) {
      console.error(`google-services.json not found at ${src}`);
    } else {
      const destDir = path.join(projectRoot, 'android', 'app');
      if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });
      const dest = path.join(destDir, 'google-services.json');
      copyGoogleServices(src, dest);
    }
  }

  if (webConfigPath) {
    const src = path.resolve(webConfigPath);
    if (!fs.existsSync(src)) {
      console.error(`web config not found at ${src}`);
    } else {
      let raw = fs.readFileSync(src, { encoding: 'utf8' });
      let obj;
      try {
        obj = JSON.parse(raw);
      } catch (err) {
        console.error('Failed to parse web config JSON:', err.message);
      }
      if (obj) {
        const target = path.join(projectRoot, 'firebaseConfig.ts');
        writeFirebaseConfig(target, obj);
      }
    }
  }

  console.log('\nNext steps:');
  console.log(' - For Android: rebuild the app (native) so Google services are applied:');
  console.log('     npx expo run:android  (or) npx react-native run-android');
  console.log(' - For Web: if you wrote firebaseConfig.ts, your web auth (firebase JS SDK) will use that config.');
  console.log(' - For iOS: download GoogleService-Info.plist from Firebase console and add it to ios/YourApp/ (and run pod install).');
  console.log('\nIf you need me to generate the web-config template or check files in the project, tell me.');
}

main();
